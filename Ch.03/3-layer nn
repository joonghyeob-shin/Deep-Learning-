 import numpy as np
 

 def init_network():                                                # bias 및 weight 초기화 & 딕셔너리 변수에 저장함.
  network = {}
  network['W1'] = np.array([[0.1, 0.3, 0.5], [0.2, 0.4, 0.6]])
  network['b1'] = np.array([0.1, 0.2, 0.3])
  network['W2'] = np.array([[0.1, 0.4], [0.2, 0.5], [0.3, 0.6]])
  network['b2'] = np.array([0.1, 0.2])
  network['W3'] = np.array([[0.1, 0.3], [0.2, 0.4]])
  network['b3'] = np.array([0.1, 0.2])
  
  return network

def identity_function(x):
  return x

def sigmoid(x):
    return 1 / (1+np.exp(-x))

def forward(network, x):                                          # forward(순전파)함수 정의
  W1, W2, W3 = network['W1'], network['W2'], network['W3']
  b1, b2, b3 = network['b1'], network['b2'], network['b3']
  
  a1 = np.dot(x, W1) + b1           # 0->1층 전달
  z1 = sigmoid(a1)                  # 활성화  
  a2 = np.dot(z1, W2) + b2
  z2 = sigmoid(a2)
  a3 = np.dot(z2,W3) + b3
  y = identity_function(a3)         # 출력층의 활성화함수(항등함수)

  return y

network = init_network()
x = np.array([1.0, 0.5])            # 입력값
y = forward(network, x)
print(y)                            # 출력값 : [0.31682708 0.69627909]
